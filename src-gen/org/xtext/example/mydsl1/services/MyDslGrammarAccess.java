/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//    commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenBrowserCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigateToCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClickCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFillCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSelectCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVerifyCommandParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReadCommandParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Command:
		//    OpenBrowserCommand |
		//    NavigateToCommand |
		//    ClickCommand |
		//    FillCommand |
		//    SelectCommand |
		//    VerifyCommand |
		//    ReadCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//OpenBrowserCommand |
		//NavigateToCommand |
		//ClickCommand |
		//FillCommand |
		//SelectCommand |
		//VerifyCommand |
		//ReadCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpenBrowserCommand
		public RuleCall getOpenBrowserCommandParserRuleCall_0() { return cOpenBrowserCommandParserRuleCall_0; }
		
		//NavigateToCommand
		public RuleCall getNavigateToCommandParserRuleCall_1() { return cNavigateToCommandParserRuleCall_1; }
		
		//ClickCommand
		public RuleCall getClickCommandParserRuleCall_2() { return cClickCommandParserRuleCall_2; }
		
		//FillCommand
		public RuleCall getFillCommandParserRuleCall_3() { return cFillCommandParserRuleCall_3; }
		
		//SelectCommand
		public RuleCall getSelectCommandParserRuleCall_4() { return cSelectCommandParserRuleCall_4; }
		
		//VerifyCommand
		public RuleCall getVerifyCommandParserRuleCall_5() { return cVerifyCommandParserRuleCall_5; }
		
		//ReadCommand
		public RuleCall getReadCommandParserRuleCall_6() { return cReadCommandParserRuleCall_6; }
	}
	public class OpenBrowserCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.OpenBrowserCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenBrowserAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBrowserKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWindowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenBrowserCommand:
		//    {OpenBrowser}'open' 'a' 'browser' 'window';
		@Override public ParserRule getRule() { return rule; }
		
		//{OpenBrowser}'open' 'a' 'browser' 'window'
		public Group getGroup() { return cGroup; }
		
		//{OpenBrowser}
		public Action getOpenBrowserAction_0() { return cOpenBrowserAction_0; }
		
		//'open'
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//'browser'
		public Keyword getBrowserKeyword_3() { return cBrowserKeyword_3; }
		
		//'window'
		public Keyword getWindowKeyword_4() { return cWindowKeyword_4; }
	}
	public class NavigateToCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.NavigateToCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUrlKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUrlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUrlSTRINGTerminalRuleCall_4_0 = (RuleCall)cUrlAssignment_4.eContents().get(0);
		
		//NavigateToCommand:
		//    'go' 'to' 'the' 'url' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' 'to' 'the' 'url' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'url'
		public Keyword getUrlKeyword_3() { return cUrlKeyword_3; }
		
		//url=STRING
		public Assignment getUrlAssignment_4() { return cUrlAssignment_4; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_4_0() { return cUrlSTRINGTerminalRuleCall_4_0; }
	}
	public class ClickCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ClickCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cElementKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTextSTRINGTerminalRuleCall_4_0 = (RuleCall)cElementTextAssignment_4.eContents().get(0);
		
		//ClickCommand:
		//    'click' 'on' 'the' 'element' elementText=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'click' 'on' 'the' 'element' elementText=STRING
		public Group getGroup() { return cGroup; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'element'
		public Keyword getElementKeyword_3() { return cElementKeyword_3; }
		
		//elementText=STRING
		public Assignment getElementTextAssignment_4() { return cElementTextAssignment_4; }
		
		//STRING
		public RuleCall getElementTextSTRINGTerminalRuleCall_4_0() { return cElementTextSTRINGTerminalRuleCall_4_0; }
	}
	public class FillCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.FillCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFieldNameAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cFieldValueAssignment_5.eContents().get(0);
		
		//FillCommand:
		//    'fill' 'the' 'field' fieldName=STRING 'with' fieldValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'fill' 'the' 'field' fieldName=STRING 'with' fieldValue=STRING
		public Group getGroup() { return cGroup; }
		
		//'fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'field'
		public Keyword getFieldKeyword_2() { return cFieldKeyword_2; }
		
		//fieldName=STRING
		public Assignment getFieldNameAssignment_3() { return cFieldNameAssignment_3; }
		
		//STRING
		public RuleCall getFieldNameSTRINGTerminalRuleCall_3_0() { return cFieldNameSTRINGTerminalRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//fieldValue=STRING
		public Assignment getFieldValueAssignment_5() { return cFieldValueAssignment_5; }
		
		//STRING
		public RuleCall getFieldValueSTRINGTerminalRuleCall_5_0() { return cFieldValueSTRINGTerminalRuleCall_5_0; }
	}
	public class SelectCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.SelectCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCheckboxKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCheckboxNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCheckboxNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cCheckboxNameAssignment_4.eContents().get(0);
		
		//SelectCommand:
		//    'select' 'the' 'checkbox' 'named' checkboxName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' 'the' 'checkbox' 'named' checkboxName=STRING
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_2() { return cCheckboxKeyword_2; }
		
		//'named'
		public Keyword getNamedKeyword_3() { return cNamedKeyword_3; }
		
		//checkboxName=STRING
		public Assignment getCheckboxNameAssignment_4() { return cCheckboxNameAssignment_4; }
		
		//STRING
		public RuleCall getCheckboxNameSTRINGTerminalRuleCall_4_0() { return cCheckboxNameSTRINGTerminalRuleCall_4_0; }
	}
	public class VerifyCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.VerifyCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPageKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cContainsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cStringKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cVerifyStringAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVerifyStringSTRINGTerminalRuleCall_7_0 = (RuleCall)cVerifyStringAssignment_7.eContents().get(0);
		
		//VerifyCommand:
		//    'verify' 'that' 'the' 'page' 'contains' 'the' 'string' verifyString=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' 'that' 'the' 'page' 'contains' 'the' 'string' verifyString=STRING
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//'that'
		public Keyword getThatKeyword_1() { return cThatKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'page'
		public Keyword getPageKeyword_3() { return cPageKeyword_3; }
		
		//'contains'
		public Keyword getContainsKeyword_4() { return cContainsKeyword_4; }
		
		//'the'
		public Keyword getTheKeyword_5() { return cTheKeyword_5; }
		
		//'string'
		public Keyword getStringKeyword_6() { return cStringKeyword_6; }
		
		//verifyString=STRING
		public Assignment getVerifyStringAssignment_7() { return cVerifyStringAssignment_7; }
		
		//STRING
		public RuleCall getVerifyStringSTRINGTerminalRuleCall_7_0() { return cVerifyStringSTRINGTerminalRuleCall_7_0; }
	}
	public class ReadCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ReadCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cElementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementTextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementTextSTRINGTerminalRuleCall_5_0 = (RuleCall)cElementTextAssignment_5.eContents().get(0);
		private final Keyword cAndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cStoreKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cItKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cInKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cVariableKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cVariableNameAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cVariableNameIDTerminalRuleCall_11_0 = (RuleCall)cVariableNameAssignment_11.eContents().get(0);
		
		//ReadCommand:
		//    'read' 'the' 'element' 'with' 'text' elementText=STRING 'and' 'store' 'it' 'in' 'variable' variableName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' 'the' 'element' 'with' 'text' elementText=STRING 'and' 'store' 'it' 'in' 'variable' variableName=ID
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'element'
		public Keyword getElementKeyword_2() { return cElementKeyword_2; }
		
		//'with'
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//'text'
		public Keyword getTextKeyword_4() { return cTextKeyword_4; }
		
		//elementText=STRING
		public Assignment getElementTextAssignment_5() { return cElementTextAssignment_5; }
		
		//STRING
		public RuleCall getElementTextSTRINGTerminalRuleCall_5_0() { return cElementTextSTRINGTerminalRuleCall_5_0; }
		
		//'and'
		public Keyword getAndKeyword_6() { return cAndKeyword_6; }
		
		//'store'
		public Keyword getStoreKeyword_7() { return cStoreKeyword_7; }
		
		//'it'
		public Keyword getItKeyword_8() { return cItKeyword_8; }
		
		//'in'
		public Keyword getInKeyword_9() { return cInKeyword_9; }
		
		//'variable'
		public Keyword getVariableKeyword_10() { return cVariableKeyword_10; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_11() { return cVariableNameAssignment_11; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_11_0() { return cVariableNameIDTerminalRuleCall_11_0; }
	}
	
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final OpenBrowserCommandElements pOpenBrowserCommand;
	private final NavigateToCommandElements pNavigateToCommand;
	private final ClickCommandElements pClickCommand;
	private final FillCommandElements pFillCommand;
	private final SelectCommandElements pSelectCommand;
	private final VerifyCommandElements pVerifyCommand;
	private final ReadCommandElements pReadCommand;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pOpenBrowserCommand = new OpenBrowserCommandElements();
		this.pNavigateToCommand = new NavigateToCommandElements();
		this.pClickCommand = new ClickCommandElements();
		this.pFillCommand = new FillCommandElements();
		this.pSelectCommand = new SelectCommandElements();
		this.pVerifyCommand = new VerifyCommandElements();
		this.pReadCommand = new ReadCommandElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl1.MyDsl.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//    OpenBrowserCommand |
	//    NavigateToCommand |
	//    ClickCommand |
	//    FillCommand |
	//    SelectCommand |
	//    VerifyCommand |
	//    ReadCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//OpenBrowserCommand:
	//    {OpenBrowser}'open' 'a' 'browser' 'window';
	public OpenBrowserCommandElements getOpenBrowserCommandAccess() {
		return pOpenBrowserCommand;
	}
	
	public ParserRule getOpenBrowserCommandRule() {
		return getOpenBrowserCommandAccess().getRule();
	}
	
	//NavigateToCommand:
	//    'go' 'to' 'the' 'url' url=STRING;
	public NavigateToCommandElements getNavigateToCommandAccess() {
		return pNavigateToCommand;
	}
	
	public ParserRule getNavigateToCommandRule() {
		return getNavigateToCommandAccess().getRule();
	}
	
	//ClickCommand:
	//    'click' 'on' 'the' 'element' elementText=STRING;
	public ClickCommandElements getClickCommandAccess() {
		return pClickCommand;
	}
	
	public ParserRule getClickCommandRule() {
		return getClickCommandAccess().getRule();
	}
	
	//FillCommand:
	//    'fill' 'the' 'field' fieldName=STRING 'with' fieldValue=STRING;
	public FillCommandElements getFillCommandAccess() {
		return pFillCommand;
	}
	
	public ParserRule getFillCommandRule() {
		return getFillCommandAccess().getRule();
	}
	
	//SelectCommand:
	//    'select' 'the' 'checkbox' 'named' checkboxName=STRING;
	public SelectCommandElements getSelectCommandAccess() {
		return pSelectCommand;
	}
	
	public ParserRule getSelectCommandRule() {
		return getSelectCommandAccess().getRule();
	}
	
	//VerifyCommand:
	//    'verify' 'that' 'the' 'page' 'contains' 'the' 'string' verifyString=STRING;
	public VerifyCommandElements getVerifyCommandAccess() {
		return pVerifyCommand;
	}
	
	public ParserRule getVerifyCommandRule() {
		return getVerifyCommandAccess().getRule();
	}
	
	//ReadCommand:
	//    'read' 'the' 'element' 'with' 'text' elementText=STRING 'and' 'store' 'it' 'in' 'variable' variableName=ID;
	public ReadCommandElements getReadCommandAccess() {
		return pReadCommand;
	}
	
	public ParserRule getReadCommandRule() {
		return getReadCommandAccess().getRule();
	}
	
	//terminal STRING:
	//    '"' ( '\\' . | !('\\' | '"') )* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//// Define whitespace and comments
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
