/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl1.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl1.myDsl.ClickCommand;
import org.xtext.example.mydsl1.myDsl.FillCommand;
import org.xtext.example.mydsl1.myDsl.Model;
import org.xtext.example.mydsl1.myDsl.MyDslPackage;
import org.xtext.example.mydsl1.myDsl.NavigateToCommand;
import org.xtext.example.mydsl1.myDsl.OpenBrowser;
import org.xtext.example.mydsl1.myDsl.ReadCommand;
import org.xtext.example.mydsl1.myDsl.SelectCommand;
import org.xtext.example.mydsl1.myDsl.VerifyCommand;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CLICK_COMMAND:
				sequence_ClickCommand(context, (ClickCommand) semanticObject); 
				return; 
			case MyDslPackage.FILL_COMMAND:
				sequence_FillCommand(context, (FillCommand) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.NAVIGATE_TO_COMMAND:
				sequence_NavigateToCommand(context, (NavigateToCommand) semanticObject); 
				return; 
			case MyDslPackage.OPEN_BROWSER:
				sequence_OpenBrowserCommand(context, (OpenBrowser) semanticObject); 
				return; 
			case MyDslPackage.READ_COMMAND:
				sequence_ReadCommand(context, (ReadCommand) semanticObject); 
				return; 
			case MyDslPackage.SELECT_COMMAND:
				sequence_SelectCommand(context, (SelectCommand) semanticObject); 
				return; 
			case MyDslPackage.VERIFY_COMMAND:
				sequence_VerifyCommand(context, (VerifyCommand) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns ClickCommand
	 *     ClickCommand returns ClickCommand
	 *
	 * Constraint:
	 *     elementText=STRING
	 * </pre>
	 */
	protected void sequence_ClickCommand(ISerializationContext context, ClickCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CLICK_COMMAND__ELEMENT_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CLICK_COMMAND__ELEMENT_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickCommandAccess().getElementTextSTRINGTerminalRuleCall_1_0(), semanticObject.getElementText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns FillCommand
	 *     FillCommand returns FillCommand
	 *
	 * Constraint:
	 *     (fieldName=STRING fieldValue=STRING)
	 * </pre>
	 */
	protected void sequence_FillCommand(ISerializationContext context, FillCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILL_COMMAND__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILL_COMMAND__FIELD_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FILL_COMMAND__FIELD_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FILL_COMMAND__FIELD_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFillCommandAccess().getFieldNameSTRINGTerminalRuleCall_3_0(), semanticObject.getFieldName());
		feeder.accept(grammarAccess.getFillCommandAccess().getFieldValueSTRINGTerminalRuleCall_5_0(), semanticObject.getFieldValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns NavigateToCommand
	 *     NavigateToCommand returns NavigateToCommand
	 *
	 * Constraint:
	 *     url=STRING
	 * </pre>
	 */
	protected void sequence_NavigateToCommand(ISerializationContext context, NavigateToCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAVIGATE_TO_COMMAND__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAVIGATE_TO_COMMAND__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNavigateToCommandAccess().getUrlSTRINGTerminalRuleCall_4_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns OpenBrowser
	 *     OpenBrowserCommand returns OpenBrowser
	 *
	 * Constraint:
	 *     {OpenBrowser}
	 * </pre>
	 */
	protected void sequence_OpenBrowserCommand(ISerializationContext context, OpenBrowser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns ReadCommand
	 *     ReadCommand returns ReadCommand
	 *
	 * Constraint:
	 *     (elementText=STRING variableName=ID)
	 * </pre>
	 */
	protected void sequence_ReadCommand(ISerializationContext context, ReadCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ_COMMAND__ELEMENT_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ_COMMAND__ELEMENT_TEXT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.READ_COMMAND__VARIABLE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.READ_COMMAND__VARIABLE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReadCommandAccess().getElementTextSTRINGTerminalRuleCall_5_0(), semanticObject.getElementText());
		feeder.accept(grammarAccess.getReadCommandAccess().getVariableNameIDTerminalRuleCall_11_0(), semanticObject.getVariableName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns SelectCommand
	 *     SelectCommand returns SelectCommand
	 *
	 * Constraint:
	 *     checkboxName=STRING
	 * </pre>
	 */
	protected void sequence_SelectCommand(ISerializationContext context, SelectCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SELECT_COMMAND__CHECKBOX_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SELECT_COMMAND__CHECKBOX_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectCommandAccess().getCheckboxNameSTRINGTerminalRuleCall_4_0(), semanticObject.getCheckboxName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns VerifyCommand
	 *     VerifyCommand returns VerifyCommand
	 *
	 * Constraint:
	 *     verifyString=STRING
	 * </pre>
	 */
	protected void sequence_VerifyCommand(ISerializationContext context, VerifyCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VERIFY_COMMAND__VERIFY_STRING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VERIFY_COMMAND__VERIFY_STRING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerifyCommandAccess().getVerifyStringSTRINGTerminalRuleCall_6_0(), semanticObject.getVerifyString());
		feeder.finish();
	}
	
	
}
