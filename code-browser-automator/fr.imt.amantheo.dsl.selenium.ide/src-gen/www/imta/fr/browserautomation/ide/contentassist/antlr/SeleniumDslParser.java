/*
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import www.imta.fr.browserautomation.ide.contentassist.antlr.internal.InternalSeleniumDslParser;
import www.imta.fr.browserautomation.services.SeleniumDslGrammarAccess;

public class SeleniumDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SeleniumDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SeleniumDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getDOMCommandAccess().getAlternatives(), "rule__DOMCommand__Alternatives");
			builder.put(grammarAccess.getGoToAccess().getAlternatives_2(), "rule__GoTo__Alternatives_2");
			builder.put(grammarAccess.getClickAccess().getAlternatives_1(), "rule__Click__Alternatives_1");
			builder.put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
			builder.put(grammarAccess.getElementPropertyAccess().getPropertyAlternatives_1_0(), "rule__ElementProperty__PropertyAlternatives_1_0");
			builder.put(grammarAccess.getSelectorPredicateAccess().getAlternatives(), "rule__SelectorPredicate__Alternatives");
			builder.put(grammarAccess.getMatcherAccess().getAlternatives(), "rule__Matcher__Alternatives");
			builder.put(grammarAccess.getDynamicURLAccess().getAlternatives(), "rule__DynamicURL__Alternatives");
			builder.put(grammarAccess.getOpenBrowserAccess().getGroup(), "rule__OpenBrowser__Group__0");
			builder.put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
			builder.put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
			builder.put(grammarAccess.getClickAccess().getGroup_1_0(), "rule__Click__Group_1_0__0");
			builder.put(grammarAccess.getCopyAccess().getGroup(), "rule__Copy__Group__0");
			builder.put(grammarAccess.getPasteAccess().getGroup(), "rule__Paste__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_2(), "rule__Selector__Group_2__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_3(), "rule__Selector__Group_3__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_4(), "rule__Selector__Group_4__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_5(), "rule__Selector__Group_5__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
			builder.put(grammarAccess.getAttributesAccess().getGroup_1(), "rule__Attributes__Group_1__0");
			builder.put(grammarAccess.getElementAttributeAccess().getGroup(), "rule__ElementAttribute__Group__0");
			builder.put(grammarAccess.getClipboardContentAccess().getGroup(), "rule__ClipboardContent__Group__0");
			builder.put(grammarAccess.getPropertiesAccess().getGroup(), "rule__Properties__Group__0");
			builder.put(grammarAccess.getPropertiesAccess().getGroup_1(), "rule__Properties__Group_1__0");
			builder.put(grammarAccess.getElementPropertyAccess().getGroup(), "rule__ElementProperty__Group__0");
			builder.put(grammarAccess.getAllConditionAccess().getGroup(), "rule__AllCondition__Group__0");
			builder.put(grammarAccess.getIntWithSuffixAccess().getGroup(), "rule__IntWithSuffix__Group__0");
			builder.put(grammarAccess.getOrdinalConditionAccess().getGroup(), "rule__OrdinalCondition__Group__0");
			builder.put(grammarAccess.getLastConditionAccess().getGroup(), "rule__LastCondition__Group__0");
			builder.put(grammarAccess.getFirstConditionAccess().getGroup(), "rule__FirstCondition__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
			builder.put(grammarAccess.getVerifyAccess().getGroup_5(), "rule__Verify__Group_5__0");
			builder.put(grammarAccess.getBrowserDslAccess().getCommandsAssignment(), "rule__BrowserDsl__CommandsAssignment");
			builder.put(grammarAccess.getGoToAccess().getUrlAssignment_2_0(), "rule__GoTo__UrlAssignment_2_0");
			builder.put(grammarAccess.getClickAccess().getElementAssignment_2(), "rule__Click__ElementAssignment_2");
			builder.put(grammarAccess.getCopyAccess().getPropertyAssignment_4(), "rule__Copy__PropertyAssignment_4");
			builder.put(grammarAccess.getCopyAccess().getElementAssignment_6(), "rule__Copy__ElementAssignment_6");
			builder.put(grammarAccess.getCopyAccess().getKeyAssignment_8(), "rule__Copy__KeyAssignment_8");
			builder.put(grammarAccess.getPasteAccess().getElementAssignment_7(), "rule__Paste__ElementAssignment_7");
			builder.put(grammarAccess.getInsertAccess().getElementAssignment_1(), "rule__Insert__ElementAssignment_1");
			builder.put(grammarAccess.getInsertAccess().getContentAssignment_3(), "rule__Insert__ContentAssignment_3");
			builder.put(grammarAccess.getSelectorAccess().getPredicateAssignment_0(), "rule__Selector__PredicateAssignment_0");
			builder.put(grammarAccess.getSelectorAccess().getDomTypeAssignment_1(), "rule__Selector__DomTypeAssignment_1");
			builder.put(grammarAccess.getSelectorAccess().getAttributesAssignment_2_2(), "rule__Selector__AttributesAssignment_2_2");
			builder.put(grammarAccess.getSelectorAccess().getLabelAssignment_3_3(), "rule__Selector__LabelAssignment_3_3");
			builder.put(grammarAccess.getSelectorAccess().getPropertiesAssignment_4_2(), "rule__Selector__PropertiesAssignment_4_2");
			builder.put(grammarAccess.getSelectorAccess().getParentAssignment_5_1(), "rule__Selector__ParentAssignment_5_1");
			builder.put(grammarAccess.getAttributesAccess().getAttributesAssignment_0(), "rule__Attributes__AttributesAssignment_0");
			builder.put(grammarAccess.getAttributesAccess().getAttributesAssignment_1_1(), "rule__Attributes__AttributesAssignment_1_1");
			builder.put(grammarAccess.getElementAttributeAccess().getNameAssignment_0(), "rule__ElementAttribute__NameAssignment_0");
			builder.put(grammarAccess.getElementAttributeAccess().getMatcherAssignment_1(), "rule__ElementAttribute__MatcherAssignment_1");
			builder.put(grammarAccess.getElementAttributeAccess().getValueAssignment_2(), "rule__ElementAttribute__ValueAssignment_2");
			builder.put(grammarAccess.getClipboardContentAccess().getKeyAssignment_3(), "rule__ClipboardContent__KeyAssignment_3");
			builder.put(grammarAccess.getStringContentAccess().getValueAssignment(), "rule__StringContent__ValueAssignment");
			builder.put(grammarAccess.getPropertiesAccess().getPropertiesAssignment_0(), "rule__Properties__PropertiesAssignment_0");
			builder.put(grammarAccess.getPropertiesAccess().getPropertiesAssignment_1_1(), "rule__Properties__PropertiesAssignment_1_1");
			builder.put(grammarAccess.getElementPropertyAccess().getNegatedAssignment_0(), "rule__ElementProperty__NegatedAssignment_0");
			builder.put(grammarAccess.getElementPropertyAccess().getPropertyAssignment_1(), "rule__ElementProperty__PropertyAssignment_1");
			builder.put(grammarAccess.getIntWithSuffixAccess().getValueAssignment_0(), "rule__IntWithSuffix__ValueAssignment_0");
			builder.put(grammarAccess.getOrdinalConditionAccess().getOrdinalAssignment_1(), "rule__OrdinalCondition__OrdinalAssignment_1");
			builder.put(grammarAccess.getVerifyAccess().getSelectorAssignment_2(), "rule__Verify__SelectorAssignment_2");
			builder.put(grammarAccess.getVerifyAccess().getPropertiesAssignment_4(), "rule__Verify__PropertiesAssignment_4");
			builder.put(grammarAccess.getVerifyAccess().getPropertiesAssignment_5_1(), "rule__Verify__PropertiesAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SeleniumDslGrammarAccess grammarAccess;

	@Override
	protected InternalSeleniumDslParser createParser() {
		InternalSeleniumDslParser result = new InternalSeleniumDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SeleniumDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SeleniumDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
