/*
 * generated by Xtext 2.32.0
 */
grammar InternalSeleniumDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package www.imta.fr.browserautomation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package www.imta.fr.browserautomation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import www.imta.fr.browserautomation.services.SeleniumDslGrammarAccess;

}

@parser::members {

 	private SeleniumDslGrammarAccess grammarAccess;

    public InternalSeleniumDslParser(TokenStream input, SeleniumDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BrowserDsl";
   	}

   	@Override
   	protected SeleniumDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBrowserDsl
entryRuleBrowserDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrowserDslRule()); }
	iv_ruleBrowserDsl=ruleBrowserDsl
	{ $current=$iv_ruleBrowserDsl.current; }
	EOF;

// Rule BrowserDsl
ruleBrowserDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBrowserDslAccess().getCommandsCommandParserRuleCall_0());
			}
			lv_commands_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBrowserDslRule());
				}
				add(
					$current,
					"commands",
					lv_commands_0_0,
					"www.imta.fr.browserautomation.SeleniumDsl.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getOpenBrowserParserRuleCall_0());
		}
		this_OpenBrowser_0=ruleOpenBrowser
		{
			$current = $this_OpenBrowser_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getGoToParserRuleCall_1());
		}
		this_GoTo_1=ruleGoTo
		{
			$current = $this_GoTo_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getDOMCommandParserRuleCall_2());
		}
		this_DOMCommand_2=ruleDOMCommand
		{
			$current = $this_DOMCommand_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOpenBrowser
entryRuleOpenBrowser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenBrowserRule()); }
	iv_ruleOpenBrowser=ruleOpenBrowser
	{ $current=$iv_ruleOpenBrowser.current; }
	EOF;

// Rule OpenBrowser
ruleOpenBrowser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpenBrowserAccess().getOpenBrowserAction_0(),
					$current);
			}
		)
		otherlv_1='open'
		{
			newLeafNode(otherlv_1, grammarAccess.getOpenBrowserAccess().getOpenKeyword_1());
		}
		otherlv_2='a'
		{
			newLeafNode(otherlv_2, grammarAccess.getOpenBrowserAccess().getAKeyword_2());
		}
		otherlv_3='browser'
		{
			newLeafNode(otherlv_3, grammarAccess.getOpenBrowserAccess().getBrowserKeyword_3());
		}
		otherlv_4='window'
		{
			newLeafNode(otherlv_4, grammarAccess.getOpenBrowserAccess().getWindowKeyword_4());
		}
	)
;

// Entry rule entryRuleDOMCommand
entryRuleDOMCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOMCommandRule()); }
	iv_ruleDOMCommand=ruleDOMCommand
	{ $current=$iv_ruleDOMCommand.current; }
	EOF;

// Rule DOMCommand
ruleDOMCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDOMCommandAccess().getClickParserRuleCall_0());
		}
		this_Click_0=ruleClick
		{
			$current = $this_Click_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDOMCommandAccess().getCopyParserRuleCall_1());
		}
		this_Copy_1=ruleCopy
		{
			$current = $this_Copy_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDOMCommandAccess().getPasteParserRuleCall_2());
		}
		this_Paste_2=rulePaste
		{
			$current = $this_Paste_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDOMCommandAccess().getVerifyParserRuleCall_3());
		}
		this_Verify_3=ruleVerify
		{
			$current = $this_Verify_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDOMCommandAccess().getInsertParserRuleCall_4());
		}
		this_Insert_4=ruleInsert
		{
			$current = $this_Insert_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	iv_ruleGoTo=ruleGoTo
	{ $current=$iv_ruleGoTo.current; }
	EOF;

// Rule GoTo
ruleGoTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getGoKeyword_0());
		}
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getGoToAccess().getToKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGoToAccess().getUrlDynamicURLParserRuleCall_2_0_0());
					}
					lv_url_2_0=ruleDynamicURL
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGoToRule());
						}
						set(
							$current,
							"url",
							lv_url_2_0,
							"www.imta.fr.browserautomation.SeleniumDsl.DynamicURL");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_3='URL'
			{
				newLeafNode(otherlv_3, grammarAccess.getGoToAccess().getURLKeyword_2_1());
			}
		)?
	)
;

// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	iv_ruleClick=ruleClick
	{ $current=$iv_ruleClick.current; }
	EOF;

// Rule Click
ruleClick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClickAccess().getClickAction_0(),
					$current);
			}
		)
		(
			(
				otherlv_1='click'
				{
					newLeafNode(otherlv_1, grammarAccess.getClickAccess().getClickKeyword_1_0_0());
				}
				otherlv_2='on'
				{
					newLeafNode(otherlv_2, grammarAccess.getClickAccess().getOnKeyword_1_0_1());
				}
			)
			    |
			otherlv_3='select'
			{
				newLeafNode(otherlv_3, grammarAccess.getClickAccess().getSelectKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getElementSelectorParserRuleCall_2_0());
				}
				lv_element_4_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"element",
						lv_element_4_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCopy
entryRuleCopy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCopyRule()); }
	iv_ruleCopy=ruleCopy
	{ $current=$iv_ruleCopy.current; }
	EOF;

// Rule Copy
ruleCopy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCopyAccess().getCopyAction_0(),
					$current);
			}
		)
		otherlv_1='copy'
		{
			newLeafNode(otherlv_1, grammarAccess.getCopyAccess().getCopyKeyword_1());
		}
		otherlv_2='the'
		{
			newLeafNode(otherlv_2, grammarAccess.getCopyAccess().getTheKeyword_2());
		}
		otherlv_3='property'
		{
			newLeafNode(otherlv_3, grammarAccess.getCopyAccess().getPropertyKeyword_3());
		}
		(
			(
				lv_property_4_0=RULE_HTML_ATTRIBUTE
				{
					newLeafNode(lv_property_4_0, grammarAccess.getCopyAccess().getPropertyHTML_ATTRIBUTETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCopyRule());
					}
					setWithLastConsumed(
						$current,
						"property",
						lv_property_4_0,
						"www.imta.fr.browserautomation.SeleniumDsl.HTML_ATTRIBUTE");
				}
			)
		)
		otherlv_5='of'
		{
			newLeafNode(otherlv_5, grammarAccess.getCopyAccess().getOfKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCopyAccess().getElementSelectorParserRuleCall_6_0());
				}
				lv_element_6_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCopyRule());
					}
					set(
						$current,
						"element",
						lv_element_6_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='as'
		{
			newLeafNode(otherlv_7, grammarAccess.getCopyAccess().getAsKeyword_7());
		}
		(
			(
				lv_key_8_0=RULE_STRING
				{
					newLeafNode(lv_key_8_0, grammarAccess.getCopyAccess().getKeySTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCopyRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRulePaste
entryRulePaste returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPasteRule()); }
	iv_rulePaste=rulePaste
	{ $current=$iv_rulePaste.current; }
	EOF;

// Rule Paste
rulePaste returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='paste'
		{
			newLeafNode(otherlv_0, grammarAccess.getPasteAccess().getPasteKeyword_0());
		}
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getPasteAccess().getTheKeyword_1());
		}
		otherlv_2='content'
		{
			newLeafNode(otherlv_2, grammarAccess.getPasteAccess().getContentKeyword_2());
		}
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getPasteAccess().getOfKeyword_3());
		}
		otherlv_4='the'
		{
			newLeafNode(otherlv_4, grammarAccess.getPasteAccess().getTheKeyword_4());
		}
		otherlv_5='clipboard'
		{
			newLeafNode(otherlv_5, grammarAccess.getPasteAccess().getClipboardKeyword_5());
		}
		otherlv_6='in'
		{
			newLeafNode(otherlv_6, grammarAccess.getPasteAccess().getInKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPasteAccess().getElementSelectorParserRuleCall_7_0());
				}
				lv_element_7_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPasteRule());
					}
					set(
						$current,
						"element",
						lv_element_7_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fill'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getFillKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getElementSelectorParserRuleCall_1_0());
				}
				lv_element_1_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"element",
						lv_element_1_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertAccess().getContentContentParserRuleCall_3_0());
				}
				lv_content_3_0=ruleContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertRule());
					}
					set(
						$current,
						"content",
						lv_content_3_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Content");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectorAccess().getPredicateSelectorPredicateParserRuleCall_0_0());
				}
				lv_predicate_0_0=ruleSelectorPredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectorRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_0_0,
						"www.imta.fr.browserautomation.SeleniumDsl.SelectorPredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_domType_1_0=RULE_STRING
				{
					newLeafNode(lv_domType_1_0, grammarAccess.getSelectorAccess().getDomTypeSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"domType",
						lv_domType_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='with'
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getWithKeyword_2_0());
			}
			otherlv_3='properties'
			{
				newLeafNode(otherlv_3, grammarAccess.getSelectorAccess().getPropertiesKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getAttributesAttributesParserRuleCall_2_2_0());
					}
					lv_attributes_4_0=ruleAttributes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"attributes",
							lv_attributes_4_0,
							"www.imta.fr.browserautomation.SeleniumDsl.Attributes");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='with'
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getWithKeyword_3_0());
			}
			otherlv_6='associated'
			{
				newLeafNode(otherlv_6, grammarAccess.getSelectorAccess().getAssociatedKeyword_3_1());
			}
			otherlv_7='label'
			{
				newLeafNode(otherlv_7, grammarAccess.getSelectorAccess().getLabelKeyword_3_2());
			}
			(
				(
					lv_label_8_0=RULE_STRING
					{
						newLeafNode(lv_label_8_0, grammarAccess.getSelectorAccess().getLabelSTRINGTerminalRuleCall_3_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorRule());
						}
						setWithLastConsumed(
							$current,
							"label",
							lv_label_8_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			otherlv_9='that'
			{
				newLeafNode(otherlv_9, grammarAccess.getSelectorAccess().getThatKeyword_4_0());
			}
			otherlv_10='is'
			{
				newLeafNode(otherlv_10, grammarAccess.getSelectorAccess().getIsKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getPropertiesPropertiesParserRuleCall_4_2_0());
					}
					lv_properties_11_0=ruleProperties
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"properties",
							lv_properties_11_0,
							"www.imta.fr.browserautomation.SeleniumDsl.Properties");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_12='in'
			{
				newLeafNode(otherlv_12, grammarAccess.getSelectorAccess().getInKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getParentSelectorParserRuleCall_5_1_0());
					}
					lv_parent_13_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"parent",
							lv_parent_13_0,
							"www.imta.fr.browserautomation.SeleniumDsl.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getAttributesElementAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleElementAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"www.imta.fr.browserautomation.SeleniumDsl.ElementAttribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getAttributesAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributesAccess().getAttributesElementAttributeParserRuleCall_1_1_0());
					}
					lv_attributes_2_0=ruleElementAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributesRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_2_0,
							"www.imta.fr.browserautomation.SeleniumDsl.ElementAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleElementAttribute
entryRuleElementAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementAttributeRule()); }
	iv_ruleElementAttribute=ruleElementAttribute
	{ $current=$iv_ruleElementAttribute.current; }
	EOF;

// Rule ElementAttribute
ruleElementAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_HTML_ATTRIBUTE
				{
					newLeafNode(lv_name_0_0, grammarAccess.getElementAttributeAccess().getNameHTML_ATTRIBUTETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"www.imta.fr.browserautomation.SeleniumDsl.HTML_ATTRIBUTE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAttributeAccess().getMatcherMatcherParserRuleCall_1_0());
				}
				lv_matcher_1_0=ruleMatcher
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementAttributeRule());
					}
					set(
						$current,
						"matcher",
						lv_matcher_1_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Matcher");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAttributeAccess().getValueContentParserRuleCall_2_0());
				}
				lv_value_2_0=ruleContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementAttributeRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Content");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	iv_ruleContent=ruleContent
	{ $current=$iv_ruleContent.current; }
	EOF;

// Rule Content
ruleContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getContentAccess().getClipboardContentParserRuleCall_0());
		}
		this_ClipboardContent_0=ruleClipboardContent
		{
			$current = $this_ClipboardContent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getContentAccess().getStringContentParserRuleCall_1());
		}
		this_StringContent_1=ruleStringContent
		{
			$current = $this_StringContent_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClipboardContent
entryRuleClipboardContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClipboardContentRule()); }
	iv_ruleClipboardContent=ruleClipboardContent
	{ $current=$iv_ruleClipboardContent.current; }
	EOF;

// Rule ClipboardContent
ruleClipboardContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getClipboardContentAccess().getTheKeyword_0());
		}
		otherlv_1='saved'
		{
			newLeafNode(otherlv_1, grammarAccess.getClipboardContentAccess().getSavedKeyword_1());
		}
		otherlv_2='content'
		{
			newLeafNode(otherlv_2, grammarAccess.getClipboardContentAccess().getContentKeyword_2());
		}
		(
			(
				lv_key_3_0=RULE_STRING
				{
					newLeafNode(lv_key_3_0, grammarAccess.getClipboardContentAccess().getKeySTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClipboardContentRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleStringContent
entryRuleStringContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringContentRule()); }
	iv_ruleStringContent=ruleStringContent
	{ $current=$iv_ruleStringContent.current; }
	EOF;

// Rule StringContent
ruleStringContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringContentAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringContentRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleProperties
entryRuleProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertiesRule()); }
	iv_ruleProperties=ruleProperties
	{ $current=$iv_ruleProperties.current; }
	EOF;

// Rule Properties
ruleProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertiesAccess().getPropertiesElementPropertyParserRuleCall_0_0());
				}
				lv_properties_0_0=ruleElementProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertiesRule());
					}
					add(
						$current,
						"properties",
						lv_properties_0_0,
						"www.imta.fr.browserautomation.SeleniumDsl.ElementProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getPropertiesAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertiesAccess().getPropertiesElementPropertyParserRuleCall_1_1_0());
					}
					lv_properties_2_0=ruleElementProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertiesRule());
						}
						add(
							$current,
							"properties",
							lv_properties_2_0,
							"www.imta.fr.browserautomation.SeleniumDsl.ElementProperty");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleElementProperty
entryRuleElementProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementPropertyRule()); }
	iv_ruleElementProperty=ruleElementProperty
	{ $current=$iv_ruleElementProperty.current; }
	EOF;

// Rule ElementProperty
ruleElementProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_negated_0_0='not'
				{
					newLeafNode(lv_negated_0_0, grammarAccess.getElementPropertyAccess().getNegatedNotKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementPropertyRule());
					}
					setWithLastConsumed($current, "negated", lv_negated_0_0, "not");
				}
			)
		)?
		(
			(
				(
					lv_property_1_1='selected'
					{
						newLeafNode(lv_property_1_1, grammarAccess.getElementPropertyAccess().getPropertySelectedKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementPropertyRule());
						}
						setWithLastConsumed($current, "property", lv_property_1_1, null);
					}
					    |
					lv_property_1_2='visible'
					{
						newLeafNode(lv_property_1_2, grammarAccess.getElementPropertyAccess().getPropertyVisibleKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementPropertyRule());
						}
						setWithLastConsumed($current, "property", lv_property_1_2, null);
					}
					    |
					lv_property_1_3='enabled'
					{
						newLeafNode(lv_property_1_3, grammarAccess.getElementPropertyAccess().getPropertyEnabledKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementPropertyRule());
						}
						setWithLastConsumed($current, "property", lv_property_1_3, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSelectorPredicate
entryRuleSelectorPredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorPredicateRule()); }
	iv_ruleSelectorPredicate=ruleSelectorPredicate
	{ $current=$iv_ruleSelectorPredicate.current; }
	EOF;

// Rule SelectorPredicate
ruleSelectorPredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectorPredicateAccess().getAllConditionParserRuleCall_0());
		}
		this_AllCondition_0=ruleAllCondition
		{
			$current = $this_AllCondition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorPredicateAccess().getOrdinalConditionParserRuleCall_1());
		}
		this_OrdinalCondition_1=ruleOrdinalCondition
		{
			$current = $this_OrdinalCondition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorPredicateAccess().getLastConditionParserRuleCall_2());
		}
		this_LastCondition_2=ruleLastCondition
		{
			$current = $this_LastCondition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectorPredicateAccess().getFirstConditionParserRuleCall_3());
		}
		this_FirstCondition_3=ruleFirstCondition
		{
			$current = $this_FirstCondition_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAllCondition
entryRuleAllCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllConditionRule()); }
	iv_ruleAllCondition=ruleAllCondition
	{ $current=$iv_ruleAllCondition.current; }
	EOF;

// Rule AllCondition
ruleAllCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAllConditionAccess().getAllConditionAction_0(),
					$current);
			}
		)
		otherlv_1='all'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllConditionAccess().getAllKeyword_1());
		}
		otherlv_2='elements'
		{
			newLeafNode(otherlv_2, grammarAccess.getAllConditionAccess().getElementsKeyword_2());
		}
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getAllConditionAccess().getOfKeyword_3());
		}
		otherlv_4='type'
		{
			newLeafNode(otherlv_4, grammarAccess.getAllConditionAccess().getTypeKeyword_4());
		}
	)
;

// Entry rule entryRuleIntWithSuffix
entryRuleIntWithSuffix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntWithSuffixRule()); }
	iv_ruleIntWithSuffix=ruleIntWithSuffix
	{ $current=$iv_ruleIntWithSuffix.current; }
	EOF;

// Rule IntWithSuffix
ruleIntWithSuffix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getIntWithSuffixAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntWithSuffixRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		this_Suffix_1=RULE_SUFFIX
		{
			newLeafNode(this_Suffix_1, grammarAccess.getIntWithSuffixAccess().getSuffixTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOrdinalCondition
entryRuleOrdinalCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrdinalConditionRule()); }
	iv_ruleOrdinalCondition=ruleOrdinalCondition
	{ $current=$iv_ruleOrdinalCondition.current; }
	EOF;

// Rule OrdinalCondition
ruleOrdinalCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='the'
		{
			newLeafNode(otherlv_0, grammarAccess.getOrdinalConditionAccess().getTheKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrdinalConditionAccess().getOrdinalIntWithSuffixParserRuleCall_1_0());
				}
				lv_ordinal_1_0=ruleIntWithSuffix
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrdinalConditionRule());
					}
					set(
						$current,
						"ordinal",
						lv_ordinal_1_0,
						"www.imta.fr.browserautomation.SeleniumDsl.IntWithSuffix");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLastCondition
entryRuleLastCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLastConditionRule()); }
	iv_ruleLastCondition=ruleLastCondition
	{ $current=$iv_ruleLastCondition.current; }
	EOF;

// Rule LastCondition
ruleLastCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLastConditionAccess().getLastConditionAction_0(),
					$current);
			}
		)
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getLastConditionAccess().getTheKeyword_1());
		}
		otherlv_2='last'
		{
			newLeafNode(otherlv_2, grammarAccess.getLastConditionAccess().getLastKeyword_2());
		}
	)
;

// Entry rule entryRuleFirstCondition
entryRuleFirstCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFirstConditionRule()); }
	iv_ruleFirstCondition=ruleFirstCondition
	{ $current=$iv_ruleFirstCondition.current; }
	EOF;

// Rule FirstCondition
ruleFirstCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFirstConditionAccess().getFirstConditionAction_0(),
					$current);
			}
		)
		otherlv_1='the'
		{
			newLeafNode(otherlv_1, grammarAccess.getFirstConditionAccess().getTheKeyword_1());
		}
	)
;

// Entry rule entryRuleMatcher
entryRuleMatcher returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMatcherRule()); }
	iv_ruleMatcher=ruleMatcher
	{ $current=$iv_ruleMatcher.current.getText(); }
	EOF;

// Rule Matcher
ruleMatcher returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='containing'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMatcherAccess().getContainingKeyword_0());
		}
		    |
		kw='matching'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMatcherAccess().getMatchingKeyword_1());
		}
	)
;

// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	iv_ruleVerify=ruleVerify
	{ $current=$iv_ruleVerify.current; }
	EOF;

// Rule Verify
ruleVerify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='verify'
		{
			newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
		}
		otherlv_1='that'
		{
			newLeafNode(otherlv_1, grammarAccess.getVerifyAccess().getThatKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVerifyAccess().getSelectorSelectorParserRuleCall_2_0());
				}
				lv_selector_2_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerifyRule());
					}
					set(
						$current,
						"selector",
						lv_selector_2_0,
						"www.imta.fr.browserautomation.SeleniumDsl.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='is'
		{
			newLeafNode(otherlv_3, grammarAccess.getVerifyAccess().getIsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVerifyAccess().getPropertiesElementPropertyParserRuleCall_4_0());
				}
				lv_properties_4_0=ruleElementProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVerifyRule());
					}
					add(
						$current,
						"properties",
						lv_properties_4_0,
						"www.imta.fr.browserautomation.SeleniumDsl.ElementProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='and'
			{
				newLeafNode(otherlv_5, grammarAccess.getVerifyAccess().getAndKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVerifyAccess().getPropertiesElementPropertyParserRuleCall_5_1_0());
					}
					lv_properties_6_0=ruleElementProperty
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVerifyRule());
						}
						add(
							$current,
							"properties",
							lv_properties_6_0,
							"www.imta.fr.browserautomation.SeleniumDsl.ElementProperty");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDynamicURL
entryRuleDynamicURL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDynamicURLRule()); }
	iv_ruleDynamicURL=ruleDynamicURL
	{ $current=$iv_ruleDynamicURL.current.getText(); }
	EOF;

// Rule DynamicURL
ruleDynamicURL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_URL_0=RULE_URL
		{
			$current.merge(this_URL_0);
		}
		{
			newLeafNode(this_URL_0, grammarAccess.getDynamicURLAccess().getURLTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getDynamicURLAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

RULE_SUFFIX : ('st'|'nd'|'rd'|'th');

RULE_HTML_ATTRIBUTE : ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_URL : ('http' 's'? '://')? RULE_DOMAIN (':' RULE_DOMAIN)* ('.' RULE_DOMAIN)* ('/' ('~'|RULE_DOMAIN))* ('?' ('~'|RULE_DOMAIN))* ('#' ('~'|RULE_DOMAIN))?;

fragment RULE_DOMAIN : ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'-')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
