/*
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import www.imta.fr.browserautomation.seleniumDsl.BrowserDsl;
import www.imta.fr.browserautomation.seleniumDsl.Click;
import www.imta.fr.browserautomation.seleniumDsl.Combobox;
import www.imta.fr.browserautomation.seleniumDsl.Fill;
import www.imta.fr.browserautomation.seleniumDsl.GoTo;
import www.imta.fr.browserautomation.seleniumDsl.OpenBrowser;
import www.imta.fr.browserautomation.seleniumDsl.Read;
import www.imta.fr.browserautomation.seleniumDsl.Select;
import www.imta.fr.browserautomation.seleniumDsl.SeleniumDslPackage;
import www.imta.fr.browserautomation.seleniumDsl.Uncheck;
import www.imta.fr.browserautomation.seleniumDsl.Verify;
import www.imta.fr.browserautomation.services.SeleniumDslGrammarAccess;

@SuppressWarnings("all")
public class SeleniumDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SeleniumDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SeleniumDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SeleniumDslPackage.BROWSER_DSL:
				sequence_BrowserDsl(context, (BrowserDsl) semanticObject); 
				return; 
			case SeleniumDslPackage.CLICK:
				sequence_Click(context, (Click) semanticObject); 
				return; 
			case SeleniumDslPackage.COMBOBOX:
				sequence_Combobox(context, (Combobox) semanticObject); 
				return; 
			case SeleniumDslPackage.FILL:
				sequence_Fill(context, (Fill) semanticObject); 
				return; 
			case SeleniumDslPackage.GO_TO:
				sequence_GoTo(context, (GoTo) semanticObject); 
				return; 
			case SeleniumDslPackage.OPEN_BROWSER:
				sequence_OpenBrowser(context, (OpenBrowser) semanticObject); 
				return; 
			case SeleniumDslPackage.READ:
				sequence_Read(context, (Read) semanticObject); 
				return; 
			case SeleniumDslPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case SeleniumDslPackage.UNCHECK:
				sequence_Uncheck(context, (Uncheck) semanticObject); 
				return; 
			case SeleniumDslPackage.VERIFY:
				sequence_Verify(context, (Verify) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BrowserDsl returns BrowserDsl
	 *
	 * Constraint:
	 *     commands+=Command+
	 * </pre>
	 */
	protected void sequence_BrowserDsl(ISerializationContext context, BrowserDsl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Click
	 *     Click returns Click
	 *
	 * Constraint:
	 *     (linkText=STRING | buttonText=STRING | alt=STRING | variable=DOMELEMENT)
	 * </pre>
	 */
	protected void sequence_Click(ISerializationContext context, Click semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Combobox
	 *     Combobox returns Combobox
	 *
	 * Constraint:
	 *     (option=STRING label=STRING)
	 * </pre>
	 */
	protected void sequence_Combobox(ISerializationContext context, Combobox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeleniumDslPackage.Literals.COMBOBOX__OPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeleniumDslPackage.Literals.COMBOBOX__OPTION));
			if (transientValues.isValueTransient(semanticObject, SeleniumDslPackage.Literals.COMBOBOX__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeleniumDslPackage.Literals.COMBOBOX__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComboboxAccess().getOptionSTRINGTerminalRuleCall_3_0(), semanticObject.getOption());
		feeder.accept(grammarAccess.getComboboxAccess().getLabelSTRINGTerminalRuleCall_7_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Fill
	 *     Fill returns Fill
	 *
	 * Constraint:
	 *     (fieldName=STRING (textToFill=STRING | variable=DOMELEMENT))
	 * </pre>
	 */
	protected void sequence_Fill(ISerializationContext context, Fill semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns GoTo
	 *     GoTo returns GoTo
	 *
	 * Constraint:
	 *     url=DynamicURL
	 * </pre>
	 */
	protected void sequence_GoTo(ISerializationContext context, GoTo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeleniumDslPackage.Literals.GO_TO__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeleniumDslPackage.Literals.GO_TO__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoToAccess().getUrlDynamicURLParserRuleCall_3_0_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns OpenBrowser
	 *     OpenBrowser returns OpenBrowser
	 *
	 * Constraint:
	 *     {OpenBrowser}
	 * </pre>
	 */
	protected void sequence_OpenBrowser(ISerializationContext context, OpenBrowser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Read
	 *     Read returns Read
	 *
	 * Constraint:
	 *     (elements+=DOMELEMENT elements+=DOMELEMENT* linkText=STRING number=INT)
	 * </pre>
	 */
	protected void sequence_Read(ISerializationContext context, Read semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Select
	 *     Select returns Select
	 *
	 * Constraint:
	 *     (values+=STRING values+=STRING*)
	 * </pre>
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Uncheck
	 *     Uncheck returns Uncheck
	 *
	 * Constraint:
	 *     {Uncheck}
	 * </pre>
	 */
	protected void sequence_Uncheck(ISerializationContext context, Uncheck semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Verify
	 *     Verify returns Verify
	 *
	 * Constraint:
	 *     (textToVerify=STRING | linkToVerify=STRING | variable=DOMELEMENT)
	 * </pre>
	 */
	protected void sequence_Verify(ISerializationContext context, Verify semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
