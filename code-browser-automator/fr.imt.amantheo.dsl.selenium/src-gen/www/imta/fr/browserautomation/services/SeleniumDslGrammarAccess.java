/*
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeleniumDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BrowserDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.BrowserDsl");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//BrowserDsl:
		//    commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenBrowserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOMCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Command:
		//    OpenBrowser |
		//    GoTo |
		//    DOMCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//OpenBrowser |
		//GoTo |
		//DOMCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpenBrowser
		public RuleCall getOpenBrowserParserRuleCall_0() { return cOpenBrowserParserRuleCall_0; }
		
		//GoTo
		public RuleCall getGoToParserRuleCall_1() { return cGoToParserRuleCall_1; }
		
		//DOMCommand
		public RuleCall getDOMCommandParserRuleCall_2() { return cDOMCommandParserRuleCall_2; }
	}
	public class OpenBrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.OpenBrowser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenBrowserAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBrowserKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWindowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenBrowser:
		//    {OpenBrowser} 'open' 'a' 'browser' 'window';
		@Override public ParserRule getRule() { return rule; }
		
		//{OpenBrowser} 'open' 'a' 'browser' 'window'
		public Group getGroup() { return cGroup; }
		
		//{OpenBrowser}
		public Action getOpenBrowserAction_0() { return cOpenBrowserAction_0; }
		
		//'open'
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }
		
		//'a'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//'browser'
		public Keyword getBrowserKeyword_3() { return cBrowserKeyword_3; }
		
		//'window'
		public Keyword getWindowKeyword_4() { return cWindowKeyword_4; }
	}
	public class DOMCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.DOMCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClickParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCopyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPasteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVerifyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DOMCommand:
		//    Click | Insert | Copy | Paste | Verify
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Click | Insert | Copy | Paste | Verify
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Click
		public RuleCall getClickParserRuleCall_0() { return cClickParserRuleCall_0; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_1() { return cInsertParserRuleCall_1; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_2() { return cCopyParserRuleCall_2; }
		
		//Paste
		public RuleCall getPasteParserRuleCall_3() { return cPasteParserRuleCall_3; }
		
		//Verify
		public RuleCall getVerifyParserRuleCall_4() { return cVerifyParserRuleCall_4; }
	}
	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		
		//GoTo:
		//    'go' 'to' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' 'to' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClickAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cClickKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cOnKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cSelectKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementSelectorParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//Click:
		//    {Click} (('click' 'on') | 'select') element=Selector;
		@Override public ParserRule getRule() { return rule; }
		
		//{Click} (('click' 'on') | 'select') element=Selector
		public Group getGroup() { return cGroup; }
		
		//{Click}
		public Action getClickAction_0() { return cClickAction_0; }
		
		//(('click' 'on') | 'select')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('click' 'on')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'click'
		public Keyword getClickKeyword_1_0_0() { return cClickKeyword_1_0_0; }
		
		//'on'
		public Keyword getOnKeyword_1_0_1() { return cOnKeyword_1_0_1; }
		
		//'select'
		public Keyword getSelectKeyword_1_1() { return cSelectKeyword_1_1; }
		
		//element=Selector
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Selector
		public RuleCall getElementSelectorParserRuleCall_2_0() { return cElementSelectorParserRuleCall_2_0; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCopyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCopyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPropertyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertyHTML_ATTRIBUTETerminalRuleCall_4_0 = (RuleCall)cPropertyAssignment_4.eContents().get(0);
		private final Keyword cOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementSelectorParserRuleCall_6_0 = (RuleCall)cElementAssignment_6.eContents().get(0);
		private final Keyword cAsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cKeyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cKeySTRINGTerminalRuleCall_8_0 = (RuleCall)cKeyAssignment_8.eContents().get(0);
		
		//Copy:
		//    {Copy} 'copy' 'the' 'property' property=HTML_ATTRIBUTE 'of' element=Selector 'as' key=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Copy} 'copy' 'the' 'property' property=HTML_ATTRIBUTE 'of' element=Selector 'as' key=STRING
		public Group getGroup() { return cGroup; }
		
		//{Copy}
		public Action getCopyAction_0() { return cCopyAction_0; }
		
		//'copy'
		public Keyword getCopyKeyword_1() { return cCopyKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//'property'
		public Keyword getPropertyKeyword_3() { return cPropertyKeyword_3; }
		
		//property=HTML_ATTRIBUTE
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }
		
		//HTML_ATTRIBUTE
		public RuleCall getPropertyHTML_ATTRIBUTETerminalRuleCall_4_0() { return cPropertyHTML_ATTRIBUTETerminalRuleCall_4_0; }
		
		//'of'
		public Keyword getOfKeyword_5() { return cOfKeyword_5; }
		
		//element=Selector
		public Assignment getElementAssignment_6() { return cElementAssignment_6; }
		
		//Selector
		public RuleCall getElementSelectorParserRuleCall_6_0() { return cElementSelectorParserRuleCall_6_0; }
		
		//'as'
		public Keyword getAsKeyword_7() { return cAsKeyword_7; }
		
		//key=STRING
		public Assignment getKeyAssignment_8() { return cKeyAssignment_8; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_8_0() { return cKeySTRINGTerminalRuleCall_8_0; }
	}
	public class PasteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Paste");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPasteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cClipboardKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cInKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementSelectorParserRuleCall_7_0 = (RuleCall)cElementAssignment_7.eContents().get(0);
		
		//Paste:
		//    'paste' 'the' 'content' 'of' 'the' 'clipboard' 'in' element=Selector;
		@Override public ParserRule getRule() { return rule; }
		
		//'paste' 'the' 'content' 'of' 'the' 'clipboard' 'in' element=Selector
		public Group getGroup() { return cGroup; }
		
		//'paste'
		public Keyword getPasteKeyword_0() { return cPasteKeyword_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'content'
		public Keyword getContentKeyword_2() { return cContentKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//'the'
		public Keyword getTheKeyword_4() { return cTheKeyword_4; }
		
		//'clipboard'
		public Keyword getClipboardKeyword_5() { return cClipboardKeyword_5; }
		
		//'in'
		public Keyword getInKeyword_6() { return cInKeyword_6; }
		
		//element=Selector
		public Assignment getElementAssignment_7() { return cElementAssignment_7; }
		
		//Selector
		public RuleCall getElementSelectorParserRuleCall_7_0() { return cElementSelectorParserRuleCall_7_0; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementSelectorParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//Insert:
		//    'fill' element=Selector 'with' content=Content;
		@Override public ParserRule getRule() { return rule; }
		
		//'fill' element=Selector 'with' content=Content
		public Group getGroup() { return cGroup; }
		
		//'fill'
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//element=Selector
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Selector
		public RuleCall getElementSelectorParserRuleCall_1_0() { return cElementSelectorParserRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//content=Content
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//Content
		public RuleCall getContentContentParserRuleCall_3_0() { return cContentContentParserRuleCall_3_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredicateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredicateSelectorPredicateParserRuleCall_0_0 = (RuleCall)cPredicateAssignment_0.eContents().get(0);
		private final Assignment cDomTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cDomTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cPropertiesKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAttributesAttributesParserRuleCall_2_2_0 = (RuleCall)cAttributesAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cAssociatedKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLabelKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cLabelAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_3_0 = (RuleCall)cLabelAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cIsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPropertiesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPropertiesPropertiesParserRuleCall_4_2_0 = (RuleCall)cPropertiesAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParentSelectorParserRuleCall_5_1_0 = (RuleCall)cParentAssignment_5_1.eContents().get(0);
		
		//Selector:
		//    predicate=SelectorPredicate
		//    domType=STRING
		//    ('with' 'properties' attributes=Attributes)?
		//    ('with' 'associated' 'label' label=STRING)?
		//    ('that' 'is' properties=Properties)?
		//    ('in' parent=Selector)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//predicate=SelectorPredicate
		//domType=STRING
		//('with' 'properties' attributes=Attributes)?
		//('with' 'associated' 'label' label=STRING)?
		//('that' 'is' properties=Properties)?
		//('in' parent=Selector)?
		public Group getGroup() { return cGroup; }
		
		//predicate=SelectorPredicate
		public Assignment getPredicateAssignment_0() { return cPredicateAssignment_0; }
		
		//SelectorPredicate
		public RuleCall getPredicateSelectorPredicateParserRuleCall_0_0() { return cPredicateSelectorPredicateParserRuleCall_0_0; }
		
		//domType=STRING
		public Assignment getDomTypeAssignment_1() { return cDomTypeAssignment_1; }
		
		//STRING
		public RuleCall getDomTypeSTRINGTerminalRuleCall_1_0() { return cDomTypeSTRINGTerminalRuleCall_1_0; }
		
		//('with' 'properties' attributes=Attributes)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_2_1() { return cPropertiesKeyword_2_1; }
		
		//attributes=Attributes
		public Assignment getAttributesAssignment_2_2() { return cAttributesAssignment_2_2; }
		
		//Attributes
		public RuleCall getAttributesAttributesParserRuleCall_2_2_0() { return cAttributesAttributesParserRuleCall_2_2_0; }
		
		//('with' 'associated' 'label' label=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//'associated'
		public Keyword getAssociatedKeyword_3_1() { return cAssociatedKeyword_3_1; }
		
		//'label'
		public Keyword getLabelKeyword_3_2() { return cLabelKeyword_3_2; }
		
		//label=STRING
		public Assignment getLabelAssignment_3_3() { return cLabelAssignment_3_3; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_3_0() { return cLabelSTRINGTerminalRuleCall_3_3_0; }
		
		//('that' 'is' properties=Properties)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'that'
		public Keyword getThatKeyword_4_0() { return cThatKeyword_4_0; }
		
		//'is'
		public Keyword getIsKeyword_4_1() { return cIsKeyword_4_1; }
		
		//properties=Properties
		public Assignment getPropertiesAssignment_4_2() { return cPropertiesAssignment_4_2; }
		
		//Properties
		public RuleCall getPropertiesPropertiesParserRuleCall_4_2_0() { return cPropertiesPropertiesParserRuleCall_4_2_0; }
		
		//('in' parent=Selector)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//parent=Selector
		public Assignment getParentAssignment_5_1() { return cParentAssignment_5_1; }
		
		//Selector
		public RuleCall getParentSelectorParserRuleCall_5_1_0() { return cParentSelectorParserRuleCall_5_1_0; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesElementAttributeParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertiesElementAttributeParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		
		//Attributes:
		//    attributes+=ElementAttribute ('and' properties+=ElementAttribute)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes+=ElementAttribute ('and' properties+=ElementAttribute)*
		public Group getGroup() { return cGroup; }
		
		//attributes+=ElementAttribute
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//ElementAttribute
		public RuleCall getAttributesElementAttributeParserRuleCall_0_0() { return cAttributesElementAttributeParserRuleCall_0_0; }
		
		//('and' properties+=ElementAttribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//properties+=ElementAttribute
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }
		
		//ElementAttribute
		public RuleCall getPropertiesElementAttributeParserRuleCall_1_1_0() { return cPropertiesElementAttributeParserRuleCall_1_1_0; }
	}
	public class ElementAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.ElementAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameHTML_ATTRIBUTETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMatcherAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatcherMatcherParserRuleCall_1_0 = (RuleCall)cMatcherAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueContentParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ElementAttribute:
		//    (name=HTML_ATTRIBUTE matcher=Matcher value=Content)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=HTML_ATTRIBUTE matcher=Matcher value=Content)
		public Group getGroup() { return cGroup; }
		
		//name=HTML_ATTRIBUTE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//HTML_ATTRIBUTE
		public RuleCall getNameHTML_ATTRIBUTETerminalRuleCall_0_0() { return cNameHTML_ATTRIBUTETerminalRuleCall_0_0; }
		
		//matcher=Matcher
		public Assignment getMatcherAssignment_1() { return cMatcherAssignment_1; }
		
		//Matcher
		public RuleCall getMatcherMatcherParserRuleCall_1_0() { return cMatcherMatcherParserRuleCall_1_0; }
		
		//value=Content
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Content
		public RuleCall getValueContentParserRuleCall_2_0() { return cValueContentParserRuleCall_2_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClipboardContentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringContentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Content: ClipboardContent | StringContent;
		@Override public ParserRule getRule() { return rule; }
		
		//ClipboardContent | StringContent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClipboardContent
		public RuleCall getClipboardContentParserRuleCall_0() { return cClipboardContentParserRuleCall_0; }
		
		//StringContent
		public RuleCall getStringContentParserRuleCall_1() { return cStringContentParserRuleCall_1; }
	}
	public class ClipboardContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.ClipboardContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSavedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeySTRINGTerminalRuleCall_3_0 = (RuleCall)cKeyAssignment_3.eContents().get(0);
		
		//ClipboardContent: 'the' 'saved' 'content' key=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' 'saved' 'content' key=STRING
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//'saved'
		public Keyword getSavedKeyword_1() { return cSavedKeyword_1; }
		
		//'content'
		public Keyword getContentKeyword_2() { return cContentKeyword_2; }
		
		//key=STRING
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_3_0() { return cKeySTRINGTerminalRuleCall_3_0; }
	}
	public class StringContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.StringContent");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringContent: value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class PropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Properties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertiesElementPropertyParserRuleCall_0_0 = (RuleCall)cPropertiesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertiesElementPropertyParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		
		//Properties:
		//    properties+=ElementProperty ('and' properties+=ElementProperty)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//properties+=ElementProperty ('and' properties+=ElementProperty)*
		public Group getGroup() { return cGroup; }
		
		//properties+=ElementProperty
		public Assignment getPropertiesAssignment_0() { return cPropertiesAssignment_0; }
		
		//ElementProperty
		public RuleCall getPropertiesElementPropertyParserRuleCall_0_0() { return cPropertiesElementPropertyParserRuleCall_0_0; }
		
		//('and' properties+=ElementProperty)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//properties+=ElementProperty
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }
		
		//ElementProperty
		public RuleCall getPropertiesElementPropertyParserRuleCall_1_1_0() { return cPropertiesElementPropertyParserRuleCall_1_1_0; }
	}
	public class ElementPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.ElementProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPropertyAlternatives_1_0 = (Alternatives)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cPropertySelectedKeyword_1_0_0 = (Keyword)cPropertyAlternatives_1_0.eContents().get(0);
		private final Keyword cPropertyVisibleKeyword_1_0_1 = (Keyword)cPropertyAlternatives_1_0.eContents().get(1);
		private final Keyword cPropertyEnabledKeyword_1_0_2 = (Keyword)cPropertyAlternatives_1_0.eContents().get(2);
		
		//ElementProperty:
		//    negated=("not")? property=("selected" | "visible" | "enabled")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//negated=("not")? property=("selected" | "visible" | "enabled")
		public Group getGroup() { return cGroup; }
		
		//negated=("not")?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }
		
		//("not")
		public Keyword getNegatedNotKeyword_0_0() { return cNegatedNotKeyword_0_0; }
		
		//property=("selected" | "visible" | "enabled")
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//("selected" | "visible" | "enabled")
		public Alternatives getPropertyAlternatives_1_0() { return cPropertyAlternatives_1_0; }
		
		//"selected"
		public Keyword getPropertySelectedKeyword_1_0_0() { return cPropertySelectedKeyword_1_0_0; }
		
		//"visible"
		public Keyword getPropertyVisibleKeyword_1_0_1() { return cPropertyVisibleKeyword_1_0_1; }
		
		//"enabled"
		public Keyword getPropertyEnabledKeyword_1_0_2() { return cPropertyEnabledKeyword_1_0_2; }
	}
	public class SelectorPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.SelectorPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrdinalPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLastPredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefaultFirstPredicateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SelectorPredicate:
		//    AllPredicate |
		//    OrdinalPredicate |
		//    LastPredicate |
		//    DefaultFirstPredicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AllPredicate |
		//OrdinalPredicate |
		//LastPredicate |
		//DefaultFirstPredicate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AllPredicate
		public RuleCall getAllPredicateParserRuleCall_0() { return cAllPredicateParserRuleCall_0; }
		
		//OrdinalPredicate
		public RuleCall getOrdinalPredicateParserRuleCall_1() { return cOrdinalPredicateParserRuleCall_1; }
		
		//LastPredicate
		public RuleCall getLastPredicateParserRuleCall_2() { return cLastPredicateParserRuleCall_2; }
		
		//DefaultFirstPredicate
		public RuleCall getDefaultFirstPredicateParserRuleCall_3() { return cDefaultFirstPredicateParserRuleCall_3; }
	}
	public class AllPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.AllPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cElementsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AllPredicate:
		//    {AllPredicate}'all' 'elements' 'of' 'type'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AllPredicate}'all' 'elements' 'of' 'type'
		public Group getGroup() { return cGroup; }
		
		//{AllPredicate}
		public Action getAllPredicateAction_0() { return cAllPredicateAction_0; }
		
		//'all'
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//'elements'
		public Keyword getElementsKeyword_2() { return cElementsKeyword_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
	}
	public class OrdinalPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.OrdinalPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrdinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrdinalOrdinalIntegerParserRuleCall_1_0 = (RuleCall)cOrdinalAssignment_1.eContents().get(0);
		
		//OrdinalPredicate:
		//    'the' ordinal=OrdinalInteger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'the' ordinal=OrdinalInteger
		public Group getGroup() { return cGroup; }
		
		//'the'
		public Keyword getTheKeyword_0() { return cTheKeyword_0; }
		
		//ordinal=OrdinalInteger
		public Assignment getOrdinalAssignment_1() { return cOrdinalAssignment_1; }
		
		//OrdinalInteger
		public RuleCall getOrdinalOrdinalIntegerParserRuleCall_1_0() { return cOrdinalOrdinalIntegerParserRuleCall_1_0; }
	}
	public class LastPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.LastPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLastPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLastKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LastPredicate:
		//    {LastPredicate}'the' 'last'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LastPredicate}'the' 'last'
		public Group getGroup() { return cGroup; }
		
		//{LastPredicate}
		public Action getLastPredicateAction_0() { return cLastPredicateAction_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//'last'
		public Keyword getLastKeyword_2() { return cLastKeyword_2; }
	}
	public class DefaultFirstPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.DefaultFirstPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultFirstPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DefaultFirstPredicate:
		//    {DefaultFirstPredicate} 'the'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefaultFirstPredicate} 'the'
		public Group getGroup() { return cGroup; }
		
		//{DefaultFirstPredicate}
		public Action getDefaultFirstPredicateAction_0() { return cDefaultFirstPredicateAction_0; }
		
		//'the'
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
	}
	public class MatcherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Matcher");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContainingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMatchingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Matcher:
		//    "containing" | "matching"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"containing" | "matching"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"containing"
		public Keyword getContainingKeyword_0() { return cContainingKeyword_0; }
		
		//"matching"
		public Keyword getMatchingKeyword_1() { return cMatchingKeyword_1; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorSelectorParserRuleCall_2_0 = (RuleCall)cSelectorAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesElementPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAndKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesElementPropertyParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		
		//Verify:
		//    'verify' 'that' selector=Selector 'is' properties+=ElementProperty ('and' properties+=ElementProperty)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' 'that' selector=Selector 'is' properties+=ElementProperty ('and' properties+=ElementProperty)*
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//'that'
		public Keyword getThatKeyword_1() { return cThatKeyword_1; }
		
		//selector=Selector
		public Assignment getSelectorAssignment_2() { return cSelectorAssignment_2; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_2_0() { return cSelectorSelectorParserRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//properties+=ElementProperty
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//ElementProperty
		public RuleCall getPropertiesElementPropertyParserRuleCall_4_0() { return cPropertiesElementPropertyParserRuleCall_4_0; }
		
		//('and' properties+=ElementProperty)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'and'
		public Keyword getAndKeyword_5_0() { return cAndKeyword_5_0; }
		
		//properties+=ElementProperty
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }
		
		//ElementProperty
		public RuleCall getPropertiesElementPropertyParserRuleCall_5_1_0() { return cPropertiesElementPropertyParserRuleCall_5_1_0; }
	}
	public class OrdinalIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.OrdinalInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cORDINAL_SUFFIXTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//OrdinalInteger:
		//  value=INT ORDINAL_SUFFIX;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ORDINAL_SUFFIX
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//ORDINAL_SUFFIX
		public RuleCall getORDINAL_SUFFIXTerminalRuleCall_1() { return cORDINAL_SUFFIXTerminalRuleCall_1; }
	}
	
	
	private final BrowserDslElements pBrowserDsl;
	private final CommandElements pCommand;
	private final OpenBrowserElements pOpenBrowser;
	private final DOMCommandElements pDOMCommand;
	private final GoToElements pGoTo;
	private final ClickElements pClick;
	private final CopyElements pCopy;
	private final PasteElements pPaste;
	private final InsertElements pInsert;
	private final SelectorElements pSelector;
	private final AttributesElements pAttributes;
	private final ElementAttributeElements pElementAttribute;
	private final ContentElements pContent;
	private final ClipboardContentElements pClipboardContent;
	private final StringContentElements pStringContent;
	private final PropertiesElements pProperties;
	private final ElementPropertyElements pElementProperty;
	private final SelectorPredicateElements pSelectorPredicate;
	private final AllPredicateElements pAllPredicate;
	private final OrdinalPredicateElements pOrdinalPredicate;
	private final LastPredicateElements pLastPredicate;
	private final DefaultFirstPredicateElements pDefaultFirstPredicate;
	private final MatcherElements pMatcher;
	private final VerifyElements pVerify;
	private final TerminalRule tORDINAL_SUFFIX;
	private final OrdinalIntegerElements pOrdinalInteger;
	private final TerminalRule tHTML_ATTRIBUTE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SeleniumDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBrowserDsl = new BrowserDslElements();
		this.pCommand = new CommandElements();
		this.pOpenBrowser = new OpenBrowserElements();
		this.pDOMCommand = new DOMCommandElements();
		this.pGoTo = new GoToElements();
		this.pClick = new ClickElements();
		this.pCopy = new CopyElements();
		this.pPaste = new PasteElements();
		this.pInsert = new InsertElements();
		this.pSelector = new SelectorElements();
		this.pAttributes = new AttributesElements();
		this.pElementAttribute = new ElementAttributeElements();
		this.pContent = new ContentElements();
		this.pClipboardContent = new ClipboardContentElements();
		this.pStringContent = new StringContentElements();
		this.pProperties = new PropertiesElements();
		this.pElementProperty = new ElementPropertyElements();
		this.pSelectorPredicate = new SelectorPredicateElements();
		this.pAllPredicate = new AllPredicateElements();
		this.pOrdinalPredicate = new OrdinalPredicateElements();
		this.pLastPredicate = new LastPredicateElements();
		this.pDefaultFirstPredicate = new DefaultFirstPredicateElements();
		this.pMatcher = new MatcherElements();
		this.pVerify = new VerifyElements();
		this.tORDINAL_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.ORDINAL_SUFFIX");
		this.pOrdinalInteger = new OrdinalIntegerElements();
		this.tHTML_ATTRIBUTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "www.imta.fr.browserautomation.SeleniumDsl.HTML_ATTRIBUTE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("www.imta.fr.browserautomation.SeleniumDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BrowserDsl:
	//    commands+=Command*;
	public BrowserDslElements getBrowserDslAccess() {
		return pBrowserDsl;
	}
	
	public ParserRule getBrowserDslRule() {
		return getBrowserDslAccess().getRule();
	}
	
	//Command:
	//    OpenBrowser |
	//    GoTo |
	//    DOMCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//OpenBrowser:
	//    {OpenBrowser} 'open' 'a' 'browser' 'window';
	public OpenBrowserElements getOpenBrowserAccess() {
		return pOpenBrowser;
	}
	
	public ParserRule getOpenBrowserRule() {
		return getOpenBrowserAccess().getRule();
	}
	
	//DOMCommand:
	//    Click | Insert | Copy | Paste | Verify
	//;
	public DOMCommandElements getDOMCommandAccess() {
		return pDOMCommand;
	}
	
	public ParserRule getDOMCommandRule() {
		return getDOMCommandAccess().getRule();
	}
	
	//GoTo:
	//    'go' 'to' url=STRING;
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}
	
	//Click:
	//    {Click} (('click' 'on') | 'select') element=Selector;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Copy:
	//    {Copy} 'copy' 'the' 'property' property=HTML_ATTRIBUTE 'of' element=Selector 'as' key=STRING;
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Paste:
	//    'paste' 'the' 'content' 'of' 'the' 'clipboard' 'in' element=Selector;
	public PasteElements getPasteAccess() {
		return pPaste;
	}
	
	public ParserRule getPasteRule() {
		return getPasteAccess().getRule();
	}
	
	//Insert:
	//    'fill' element=Selector 'with' content=Content;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Selector:
	//    predicate=SelectorPredicate
	//    domType=STRING
	//    ('with' 'properties' attributes=Attributes)?
	//    ('with' 'associated' 'label' label=STRING)?
	//    ('that' 'is' properties=Properties)?
	//    ('in' parent=Selector)?
	//;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Attributes:
	//    attributes+=ElementAttribute ('and' properties+=ElementAttribute)*
	//;
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//ElementAttribute:
	//    (name=HTML_ATTRIBUTE matcher=Matcher value=Content)
	//;
	public ElementAttributeElements getElementAttributeAccess() {
		return pElementAttribute;
	}
	
	public ParserRule getElementAttributeRule() {
		return getElementAttributeAccess().getRule();
	}
	
	//Content: ClipboardContent | StringContent;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//ClipboardContent: 'the' 'saved' 'content' key=STRING;
	public ClipboardContentElements getClipboardContentAccess() {
		return pClipboardContent;
	}
	
	public ParserRule getClipboardContentRule() {
		return getClipboardContentAccess().getRule();
	}
	
	//StringContent: value=STRING;
	public StringContentElements getStringContentAccess() {
		return pStringContent;
	}
	
	public ParserRule getStringContentRule() {
		return getStringContentAccess().getRule();
	}
	
	//Properties:
	//    properties+=ElementProperty ('and' properties+=ElementProperty)*
	//;
	public PropertiesElements getPropertiesAccess() {
		return pProperties;
	}
	
	public ParserRule getPropertiesRule() {
		return getPropertiesAccess().getRule();
	}
	
	//ElementProperty:
	//    negated=("not")? property=("selected" | "visible" | "enabled")
	//;
	public ElementPropertyElements getElementPropertyAccess() {
		return pElementProperty;
	}
	
	public ParserRule getElementPropertyRule() {
		return getElementPropertyAccess().getRule();
	}
	
	//SelectorPredicate:
	//    AllPredicate |
	//    OrdinalPredicate |
	//    LastPredicate |
	//    DefaultFirstPredicate
	//;
	public SelectorPredicateElements getSelectorPredicateAccess() {
		return pSelectorPredicate;
	}
	
	public ParserRule getSelectorPredicateRule() {
		return getSelectorPredicateAccess().getRule();
	}
	
	//AllPredicate:
	//    {AllPredicate}'all' 'elements' 'of' 'type'
	//;
	public AllPredicateElements getAllPredicateAccess() {
		return pAllPredicate;
	}
	
	public ParserRule getAllPredicateRule() {
		return getAllPredicateAccess().getRule();
	}
	
	//OrdinalPredicate:
	//    'the' ordinal=OrdinalInteger
	//;
	public OrdinalPredicateElements getOrdinalPredicateAccess() {
		return pOrdinalPredicate;
	}
	
	public ParserRule getOrdinalPredicateRule() {
		return getOrdinalPredicateAccess().getRule();
	}
	
	//LastPredicate:
	//    {LastPredicate}'the' 'last'
	//;
	public LastPredicateElements getLastPredicateAccess() {
		return pLastPredicate;
	}
	
	public ParserRule getLastPredicateRule() {
		return getLastPredicateAccess().getRule();
	}
	
	//DefaultFirstPredicate:
	//    {DefaultFirstPredicate} 'the'
	//;
	public DefaultFirstPredicateElements getDefaultFirstPredicateAccess() {
		return pDefaultFirstPredicate;
	}
	
	public ParserRule getDefaultFirstPredicateRule() {
		return getDefaultFirstPredicateAccess().getRule();
	}
	
	//Matcher:
	//    "containing" | "matching"
	//;
	public MatcherElements getMatcherAccess() {
		return pMatcher;
	}
	
	public ParserRule getMatcherRule() {
		return getMatcherAccess().getRule();
	}
	
	//Verify:
	//    'verify' 'that' selector=Selector 'is' properties+=ElementProperty ('and' properties+=ElementProperty)*;
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//terminal ORDINAL_SUFFIX:'st' | 'nd' | 'rd' | 'th';
	public TerminalRule getORDINAL_SUFFIXRule() {
		return tORDINAL_SUFFIX;
	}
	
	//OrdinalInteger:
	//  value=INT ORDINAL_SUFFIX;
	public OrdinalIntegerElements getOrdinalIntegerAccess() {
		return pOrdinalInteger;
	}
	
	public ParserRule getOrdinalIntegerRule() {
		return getOrdinalIntegerAccess().getRule();
	}
	
	//terminal HTML_ATTRIBUTE: ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;
	public TerminalRule getHTML_ATTRIBUTERule() {
		return tHTML_ATTRIBUTE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
