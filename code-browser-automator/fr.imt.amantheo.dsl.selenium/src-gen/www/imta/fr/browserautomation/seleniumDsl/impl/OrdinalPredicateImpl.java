/**
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.seleniumDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import www.imta.fr.browserautomation.seleniumDsl.OrdinalInteger;
import www.imta.fr.browserautomation.seleniumDsl.OrdinalPredicate;
import www.imta.fr.browserautomation.seleniumDsl.SeleniumDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ordinal Predicate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link www.imta.fr.browserautomation.seleniumDsl.impl.OrdinalPredicateImpl#getOrdinal <em>Ordinal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OrdinalPredicateImpl extends SelectorPredicateImpl implements OrdinalPredicate
{
  /**
   * The cached value of the '{@link #getOrdinal() <em>Ordinal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrdinal()
   * @generated
   * @ordered
   */
  protected OrdinalInteger ordinal;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrdinalPredicateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleniumDslPackage.Literals.ORDINAL_PREDICATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrdinalInteger getOrdinal()
  {
    return ordinal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrdinal(OrdinalInteger newOrdinal, NotificationChain msgs)
  {
    OrdinalInteger oldOrdinal = ordinal;
    ordinal = newOrdinal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL, oldOrdinal, newOrdinal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrdinal(OrdinalInteger newOrdinal)
  {
    if (newOrdinal != ordinal)
    {
      NotificationChain msgs = null;
      if (ordinal != null)
        msgs = ((InternalEObject)ordinal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL, null, msgs);
      if (newOrdinal != null)
        msgs = ((InternalEObject)newOrdinal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL, null, msgs);
      msgs = basicSetOrdinal(newOrdinal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL, newOrdinal, newOrdinal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL:
        return basicSetOrdinal(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL:
        return getOrdinal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL:
        setOrdinal((OrdinalInteger)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL:
        setOrdinal((OrdinalInteger)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleniumDslPackage.ORDINAL_PREDICATE__ORDINAL:
        return ordinal != null;
    }
    return super.eIsSet(featureID);
  }

} //OrdinalPredicateImpl
