/**
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.seleniumDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import www.imta.fr.browserautomation.seleniumDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SeleniumDslFactoryImpl extends EFactoryImpl implements SeleniumDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SeleniumDslFactory init()
  {
    try
    {
      SeleniumDslFactory theSeleniumDslFactory = (SeleniumDslFactory)EPackage.Registry.INSTANCE.getEFactory(SeleniumDslPackage.eNS_URI);
      if (theSeleniumDslFactory != null)
      {
        return theSeleniumDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SeleniumDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SeleniumDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SeleniumDslPackage.BROWSER_DSL: return createBrowserDsl();
      case SeleniumDslPackage.COMMAND: return createCommand();
      case SeleniumDslPackage.OPEN_BROWSER: return createOpenBrowser();
      case SeleniumDslPackage.DOM_COMMAND: return createDOMCommand();
      case SeleniumDslPackage.GO_TO: return createGoTo();
      case SeleniumDslPackage.CLICK: return createClick();
      case SeleniumDslPackage.COPY: return createCopy();
      case SeleniumDslPackage.PASTE: return createPaste();
      case SeleniumDslPackage.INSERT: return createInsert();
      case SeleniumDslPackage.SELECTOR: return createSelector();
      case SeleniumDslPackage.ATTRIBUTES: return createAttributes();
      case SeleniumDslPackage.ELEMENT_ATTRIBUTE: return createElementAttribute();
      case SeleniumDslPackage.CONTENT: return createContent();
      case SeleniumDslPackage.CLIPBOARD_CONTENT: return createClipboardContent();
      case SeleniumDslPackage.STRING_CONTENT: return createStringContent();
      case SeleniumDslPackage.PROPERTIES: return createProperties();
      case SeleniumDslPackage.ELEMENT_PROPERTY: return createElementProperty();
      case SeleniumDslPackage.SELECTOR_PREDICATE: return createSelectorPredicate();
      case SeleniumDslPackage.ALL_CONDITION: return createAllCondition();
      case SeleniumDslPackage.INT_WITH_SUFFIX: return createIntWithSuffix();
      case SeleniumDslPackage.ORDINAL_CONDITION: return createOrdinalCondition();
      case SeleniumDslPackage.LAST_CONDITION: return createLastCondition();
      case SeleniumDslPackage.FIRST_CONDITION: return createFirstCondition();
      case SeleniumDslPackage.VERIFY: return createVerify();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrowserDsl createBrowserDsl()
  {
    BrowserDslImpl browserDsl = new BrowserDslImpl();
    return browserDsl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenBrowser createOpenBrowser()
  {
    OpenBrowserImpl openBrowser = new OpenBrowserImpl();
    return openBrowser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOMCommand createDOMCommand()
  {
    DOMCommandImpl domCommand = new DOMCommandImpl();
    return domCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GoTo createGoTo()
  {
    GoToImpl goTo = new GoToImpl();
    return goTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Click createClick()
  {
    ClickImpl click = new ClickImpl();
    return click;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Copy createCopy()
  {
    CopyImpl copy = new CopyImpl();
    return copy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Paste createPaste()
  {
    PasteImpl paste = new PasteImpl();
    return paste;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Insert createInsert()
  {
    InsertImpl insert = new InsertImpl();
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attributes createAttributes()
  {
    AttributesImpl attributes = new AttributesImpl();
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementAttribute createElementAttribute()
  {
    ElementAttributeImpl elementAttribute = new ElementAttributeImpl();
    return elementAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Content createContent()
  {
    ContentImpl content = new ContentImpl();
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClipboardContent createClipboardContent()
  {
    ClipboardContentImpl clipboardContent = new ClipboardContentImpl();
    return clipboardContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringContent createStringContent()
  {
    StringContentImpl stringContent = new StringContentImpl();
    return stringContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Properties createProperties()
  {
    PropertiesImpl properties = new PropertiesImpl();
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementProperty createElementProperty()
  {
    ElementPropertyImpl elementProperty = new ElementPropertyImpl();
    return elementProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorPredicate createSelectorPredicate()
  {
    SelectorPredicateImpl selectorPredicate = new SelectorPredicateImpl();
    return selectorPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllCondition createAllCondition()
  {
    AllConditionImpl allCondition = new AllConditionImpl();
    return allCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntWithSuffix createIntWithSuffix()
  {
    IntWithSuffixImpl intWithSuffix = new IntWithSuffixImpl();
    return intWithSuffix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrdinalCondition createOrdinalCondition()
  {
    OrdinalConditionImpl ordinalCondition = new OrdinalConditionImpl();
    return ordinalCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LastCondition createLastCondition()
  {
    LastConditionImpl lastCondition = new LastConditionImpl();
    return lastCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FirstCondition createFirstCondition()
  {
    FirstConditionImpl firstCondition = new FirstConditionImpl();
    return firstCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Verify createVerify()
  {
    VerifyImpl verify = new VerifyImpl();
    return verify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SeleniumDslPackage getSeleniumDslPackage()
  {
    return (SeleniumDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SeleniumDslPackage getPackage()
  {
    return SeleniumDslPackage.eINSTANCE;
  }

} //SeleniumDslFactoryImpl
