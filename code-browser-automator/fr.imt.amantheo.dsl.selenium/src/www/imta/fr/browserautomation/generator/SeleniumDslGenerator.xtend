/*
 * generated by Xtext 2.32.0
 */
package www.imta.fr.browserautomation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import www.imta.fr.browserautomation.seleniumDsl.BrowserDsl
import www.imta.fr.browserautomation.seleniumDsl.Command
import www.imta.fr.browserautomation.seleniumDsl.OpenBrowser
import www.imta.fr.browserautomation.seleniumDsl.GoTo
import www.imta.fr.browserautomation.seleniumDsl.Click
import www.imta.fr.browserautomation.seleniumDsl.Fill
import www.imta.fr.browserautomation.seleniumDsl.Select
import www.imta.fr.browserautomation.seleniumDsl.Verify
import www.imta.fr.browserautomation.seleniumDsl.Read
import www.imta.fr.browserautomation.seleniumDsl.Uncheck
import www.imta.fr.browserautomation.seleniumDsl.Combobox

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SeleniumDslGenerator extends AbstractGenerator {

	   override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val model = resource.getContents().get(0) as BrowserDsl;

        if (model !== null) {
            val inputFileName = resource.URI.lastSegment.toString();

	        	
        	var name = inputFileName.replaceFirst(".selenium", ".java");
	    		    
		    var className = resource.URI.lastSegment.toString().replaceFirst(".selenium", "")
		    
		    className = Character.toUpperCase(className.charAt(0)) + className.substring(1);
		    
		    name = Character.toUpperCase(name.charAt(0)) + name.substring(1) ;

            val generatedCode = generateSeleniumCode(model, className);
            fsa.generateFile("fr/imta/amanthéo/browser/" + name, generatedCode);
        }
    }

    def String generateSeleniumCode(BrowserDsl model, String className) {
        var code = ""
        code += generateImportStatements()
        code += "public class " + className + " {\n"
        code += "    public static void main(String[] args) {\n"

        for (Command command : model.getCommands()) {
            code += processCommand(command)
        }

        code += "        driver.quit();\n"
        code += "    }\n"
        code += "}\n"

        return code.toString();
    }

    def String generateImportStatements() {
        return '''
package fr.imta.amanthéo.browser;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.interactions.Actions;
import dev.failsafe.internal.util.Assert;
import java.util.*;
'''
    }

    def String processCommand(Command command) {
        if (command instanceof OpenBrowser) {
            return "        WebDriver driver = new ChromeDriver();\n\n"
        } else if (command instanceof GoTo) {
            return "        // Go to URL\n" + "        driver.get(\"" + command.getUrl() + "\");\n\n"
        } else if (command instanceof Click) {
            return processClickCommand(command)
        } else if (command instanceof Fill) {
            return processFillCommand(command)
        } else if (command instanceof Select) {
            return processSelectCommand(command)
        } else if (command instanceof Verify) {
            return processVerifyCommand(command)
        } else if (command instanceof Read) {
            return processReadCommand(command)
        } else if (command instanceof Uncheck) {
            return "        // Uncheck checkboxes\n" +
                    "        List<WebElement> checkboxes = driver.findElements(By.xpath(\"//input[@type='checkbox']\"));\n" +
                    "        for (WebElement checkbox : checkboxes) {\n" +
                    "            if (checkbox.isSelected()) {\n" +
                    "                checkbox.click();\n" +
                    "            }\n" +
                    "        }\n\n"
        } else if (command instanceof Combobox) {
            return "        // Combobox command processing\n"
        } else {
            return ""
        }
    }

    def String processClickCommand(Click command) {
        if (command.getLinkText() !== null) {
            return "         WebElement e = driver.findElement(By.xpath(\"//a[text()='" + command.getLinkText() + "']\"));\n" +
                    "        driver.get(e.getAttribute(\"href\"));\n"
        } else if (command.getButtonText !== null) {
            return "        // Click on a button\n" +
                    "        driver.findElement(By.xpath(\"//input[@value='" + command.getButtonText() + "']\")).click();\n\n"
        } else if (command.getAlt() !== null) {
            return "        driver.findElement(By.xpath(\"//img[@alt='" + command.getAlt() + "']\")).click();\n\n"
        } else if (command.getVariable() !== null) {
            if (command.getVariable() == "url") {
                return "        driver.get(" + command.getVariable() + ");\n\n"
            }
        } else {
            return ""
        }
    }

    def String processFillCommand(Fill command) {
        return "        WebElement labelElement = driver.findElements(By.xpath(\"//label[text()='" + command.getFieldName() + "']\")).get(1);\n" +
                "        WebElement inputElement = driver.findElement(By.id(labelElement.getAttribute(\"for\")));\n" +
                (command.getTextToFill() !== null ? "        inputElement.sendKeys(\"" + command.getTextToFill() + "\");\n\n" :
                        "        inputElement.sendKeys(" + command.getVariable() + ");\n\n")
    }

    def String processSelectCommand(Select command) {
    	val values = command.values.map(v | "\"" + v + "\"").join(", ")
        return "         List<String> valuesToCheck = Arrays.asList(" + values + ");\n" +
                "        JavascriptExecutor js = (JavascriptExecutor) driver;\n" +
                "        js.executeScript(\"window.scrollTo(0, 340);\");\n" +
                "        for(String value: valuesToCheck) {\n" +
                "            WebElement labelElement = driver.findElement(By.xpath(\"//label[text='\" + value + \"']\"));\n" +
                "            WebElement inputElement = driver.findElement(By.id(labelElement.getAttribute(\"for\")));\n" +
                "            inputElement.click();\n" +
                "        }\n"
    }

    def String processVerifyCommand(Verify command) {
        if (command.getTextToVerify() !== null) {
            return "        // Verify that the page contains text\n" +
                    "        assert driver.getPageSource().contains(\"" + command.getTextToVerify() + "\");\n\n"
        } else if (command.getLinkToVerify() !== null) {
            return "        // Verify that the page contains link\n" +
                    "        assert driver.findElements(By.partialLinkText(\"" + command.getLinkToVerify() + "\")).size() > 0;\n\n"
        } else if (command.getVariable() !== null) {
            if (command.getVariable() == "url") {
                return "        // Verify that the page countains the url\n" +
                        "        WebElement foundLink = driver.findElement(By.xpath(\"//a[@href=\\\"\"+ url +\"\\\"]\"));\n" +
                        "        Assert.notNull(link, \"Link is not found.\");\n"
            } else if (command.getVariable() == "title") {
                return "        // Verify that the page countains the title\n" +
                        "        assert driver.getPageSource().contains(title);\n"
            } else {
                return ""
            }
        }
    }

    def String processReadCommand(Read command) {
        var code = "        // Get the link to a news\n" +
                "        WebElement link = driver.findElements(By.xpath(\"//a[starts-with(@href, '" + command.getLinkText() + "')]\")).get(" + command.getNumber() + ");\n"

        if (command.getElements().contains("title")) {
            code += "        String title = link.getText();\n"
        }
        if (command.getElements().contains("url")) {
            code += "        String url = link.getAttribute(\"href\");\n"
        }
        if (command.getElements().contains("text link")) {
            code += "        String title = link.getText();\n"
        }

        return code
    }
}